// Dozer Generated for dozer.generated.mutual_funds

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: mutual_funds.proto

package mutual_funds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MutualFunds_Count_FullMethodName = "/dozer.generated.mutual_funds.MutualFunds/count"
	MutualFunds_Query_FullMethodName = "/dozer.generated.mutual_funds.MutualFunds/query"
)

// MutualFundsClient is the client API for MutualFunds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualFundsClient interface {
	// *
	// Counts the number of records satisfying the given query. See [Query](../query) for the query format.
	//
	// If no query is specified, total number of records will be returned.
	Count(ctx context.Context, in *QueryMutualFundsRequest, opts ...grpc.CallOption) (*CountMutualFundsResponse, error)
	// *
	// Performs query. See [Query](../query) for the query format.
	//
	// If no query is specified, the first 50 records will be returned.
	Query(ctx context.Context, in *QueryMutualFundsRequest, opts ...grpc.CallOption) (*QueryMutualFundsResponse, error)
}

type mutualFundsClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualFundsClient(cc grpc.ClientConnInterface) MutualFundsClient {
	return &mutualFundsClient{cc}
}

func (c *mutualFundsClient) Count(ctx context.Context, in *QueryMutualFundsRequest, opts ...grpc.CallOption) (*CountMutualFundsResponse, error) {
	out := new(CountMutualFundsResponse)
	err := c.cc.Invoke(ctx, MutualFunds_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutualFundsClient) Query(ctx context.Context, in *QueryMutualFundsRequest, opts ...grpc.CallOption) (*QueryMutualFundsResponse, error) {
	out := new(QueryMutualFundsResponse)
	err := c.cc.Invoke(ctx, MutualFunds_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutualFundsServer is the server API for MutualFunds service.
// All implementations must embed UnimplementedMutualFundsServer
// for forward compatibility
type MutualFundsServer interface {
	// *
	// Counts the number of records satisfying the given query. See [Query](../query) for the query format.
	//
	// If no query is specified, total number of records will be returned.
	Count(context.Context, *QueryMutualFundsRequest) (*CountMutualFundsResponse, error)
	// *
	// Performs query. See [Query](../query) for the query format.
	//
	// If no query is specified, the first 50 records will be returned.
	Query(context.Context, *QueryMutualFundsRequest) (*QueryMutualFundsResponse, error)
	mustEmbedUnimplementedMutualFundsServer()
}

// UnimplementedMutualFundsServer must be embedded to have forward compatible implementations.
type UnimplementedMutualFundsServer struct {
}

func (UnimplementedMutualFundsServer) Count(context.Context, *QueryMutualFundsRequest) (*CountMutualFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedMutualFundsServer) Query(context.Context, *QueryMutualFundsRequest) (*QueryMutualFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMutualFundsServer) mustEmbedUnimplementedMutualFundsServer() {}

// UnsafeMutualFundsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualFundsServer will
// result in compilation errors.
type UnsafeMutualFundsServer interface {
	mustEmbedUnimplementedMutualFundsServer()
}

func RegisterMutualFundsServer(s grpc.ServiceRegistrar, srv MutualFundsServer) {
	s.RegisterService(&MutualFunds_ServiceDesc, srv)
}

func _MutualFunds_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMutualFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualFundsServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutualFunds_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualFundsServer).Count(ctx, req.(*QueryMutualFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutualFunds_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMutualFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualFundsServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutualFunds_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualFundsServer).Query(ctx, req.(*QueryMutualFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MutualFunds_ServiceDesc is the grpc.ServiceDesc for MutualFunds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualFunds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dozer.generated.mutual_funds.MutualFunds",
	HandlerType: (*MutualFundsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "count",
			Handler:    _MutualFunds_Count_Handler,
		},
		{
			MethodName: "query",
			Handler:    _MutualFunds_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mutual_funds.proto",
}

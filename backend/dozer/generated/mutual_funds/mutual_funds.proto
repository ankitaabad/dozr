// Dozer Generated for dozer.generated.mutual_funds

syntax = "proto3";
package dozer.generated.mutual_funds;
option go_package = "./dozer/generated/mutual_funds";

// import "types.proto";
/**
 * TypedService provides explicit and strongly-typed data access experience for developers.
 *
 * This allows for a more user-friendly and predictable API. Developers can rely on the explicitly defined types to guide them and catch errors at compile-time.
 */
service MutualFunds {
  /**
   * Counts the number of records satisfying the given query. See [Query](../query) for the query format.
   *
   * If no query is specified, total number of records will be returned.
   */
  rpc count(QueryMutualFundsRequest) returns (CountMutualFundsResponse);
  /**
   * Performs query. See [Query](../query) for the query format.
   *
   * If no query is specified, the first 50 records will be returned.
   */
  rpc query(QueryMutualFundsRequest) returns (QueryMutualFundsResponse);

}

// Request for `count` and `query`.
message QueryMutualFundsRequest {
  // JSON query string.
  optional string query = 1;
}

// Response for `count`.
message CountMutualFundsResponse {
  // The number of records.
  uint64 count = 1;
}

// Response for `query`.
message QueryMutualFundsResponse {
  // The list of records.
  repeated MutualFundWithId records = 1;
}

/**
 * MutualFund record type.
 * 
 * Nullable fields will be generated as `optional` fields.
 */
message MutualFund {

  optional string fundname = 1;
  int64 mfid = 2;
  optional double returns = 3;
  // Records with same primary key will have increasing version.
  uint32 __dozer_record_version = 4;
}

// A record with its id in cache.
message MutualFundWithId {
  // The record id.
  uint64 id = 1;
  // The record data.
  MutualFund record = 2;
}


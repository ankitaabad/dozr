// Dozer Generated for dozer.generated.recent_transaction

syntax = "proto3";
package dozer.generated.recent_transaction;
option go_package = "./dozer/generated/recent_transactions";


// import "types.proto";
/**
 * TypedService provides explicit and strongly-typed data access experience for developers.
 *
 * This allows for a more user-friendly and predictable API. Developers can rely on the explicitly defined types to guide them and catch errors at compile-time.
 */
service RecentTransactions {
  /**
   * Counts the number of records satisfying the given query. See [Query](../query) for the query format.
   *
   * If no query is specified, total number of records will be returned.
   */
  rpc count(QueryRecentTransactionsRequest) returns (CountRecentTransactionsResponse);
  /**
   * Performs query. See [Query](../query) for the query format.
   *
   * If no query is specified, the first 50 records will be returned.
   */
  rpc query(QueryRecentTransactionsRequest) returns (QueryRecentTransactionsResponse);

}

// Request for `count` and `query`.
message QueryRecentTransactionsRequest {
  // JSON query string.
  optional string query = 1;
}

// Response for `count`.
message CountRecentTransactionsResponse {
  // The number of records.
  uint64 count = 1;
}

// Response for `query`.
message QueryRecentTransactionsResponse {
  // The list of records.
  repeated RecentTransactionWithId records = 1;
}

/**
 * RecentTransaction record type.
 * 
 * Nullable fields will be generated as `optional` fields.
 */
message RecentTransaction {

  optional int64 amount = 1;
  optional string transactiondate = 2;
  optional string transactionstatus = 3;
  optional int64 customerid = 4;
  // Records with same primary key will have increasing version.
  uint32 __dozer_record_version = 5;
}

// A record with its id in cache.
message RecentTransactionWithId {
  // The record id.
  uint64 id = 1;
  // The record data.
  RecentTransaction record = 2;
}


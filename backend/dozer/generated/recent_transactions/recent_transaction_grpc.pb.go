// Dozer Generated for dozer.generated.recent_transaction

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: recent_transaction.proto

package recent_transactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecentTransactions_Count_FullMethodName = "/dozer.generated.recent_transaction.RecentTransactions/count"
	RecentTransactions_Query_FullMethodName = "/dozer.generated.recent_transaction.RecentTransactions/query"
)

// RecentTransactionsClient is the client API for RecentTransactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecentTransactionsClient interface {
	// *
	// Counts the number of records satisfying the given query. See [Query](../query) for the query format.
	//
	// If no query is specified, total number of records will be returned.
	Count(ctx context.Context, in *QueryRecentTransactionsRequest, opts ...grpc.CallOption) (*CountRecentTransactionsResponse, error)
	// *
	// Performs query. See [Query](../query) for the query format.
	//
	// If no query is specified, the first 50 records will be returned.
	Query(ctx context.Context, in *QueryRecentTransactionsRequest, opts ...grpc.CallOption) (*QueryRecentTransactionsResponse, error)
}

type recentTransactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecentTransactionsClient(cc grpc.ClientConnInterface) RecentTransactionsClient {
	return &recentTransactionsClient{cc}
}

func (c *recentTransactionsClient) Count(ctx context.Context, in *QueryRecentTransactionsRequest, opts ...grpc.CallOption) (*CountRecentTransactionsResponse, error) {
	out := new(CountRecentTransactionsResponse)
	err := c.cc.Invoke(ctx, RecentTransactions_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentTransactionsClient) Query(ctx context.Context, in *QueryRecentTransactionsRequest, opts ...grpc.CallOption) (*QueryRecentTransactionsResponse, error) {
	out := new(QueryRecentTransactionsResponse)
	err := c.cc.Invoke(ctx, RecentTransactions_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecentTransactionsServer is the server API for RecentTransactions service.
// All implementations must embed UnimplementedRecentTransactionsServer
// for forward compatibility
type RecentTransactionsServer interface {
	// *
	// Counts the number of records satisfying the given query. See [Query](../query) for the query format.
	//
	// If no query is specified, total number of records will be returned.
	Count(context.Context, *QueryRecentTransactionsRequest) (*CountRecentTransactionsResponse, error)
	// *
	// Performs query. See [Query](../query) for the query format.
	//
	// If no query is specified, the first 50 records will be returned.
	Query(context.Context, *QueryRecentTransactionsRequest) (*QueryRecentTransactionsResponse, error)
	mustEmbedUnimplementedRecentTransactionsServer()
}

// UnimplementedRecentTransactionsServer must be embedded to have forward compatible implementations.
type UnimplementedRecentTransactionsServer struct {
}

func (UnimplementedRecentTransactionsServer) Count(context.Context, *QueryRecentTransactionsRequest) (*CountRecentTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedRecentTransactionsServer) Query(context.Context, *QueryRecentTransactionsRequest) (*QueryRecentTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRecentTransactionsServer) mustEmbedUnimplementedRecentTransactionsServer() {}

// UnsafeRecentTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecentTransactionsServer will
// result in compilation errors.
type UnsafeRecentTransactionsServer interface {
	mustEmbedUnimplementedRecentTransactionsServer()
}

func RegisterRecentTransactionsServer(s grpc.ServiceRegistrar, srv RecentTransactionsServer) {
	s.RegisterService(&RecentTransactions_ServiceDesc, srv)
}

func _RecentTransactions_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecentTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentTransactionsServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentTransactions_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentTransactionsServer).Count(ctx, req.(*QueryRecentTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentTransactions_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecentTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentTransactionsServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentTransactions_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentTransactionsServer).Query(ctx, req.(*QueryRecentTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecentTransactions_ServiceDesc is the grpc.ServiceDesc for RecentTransactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecentTransactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dozer.generated.recent_transaction.RecentTransactions",
	HandlerType: (*RecentTransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "count",
			Handler:    _RecentTransactions_Count_Handler,
		},
		{
			MethodName: "query",
			Handler:    _RecentTransactions_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recent_transaction.proto",
}
